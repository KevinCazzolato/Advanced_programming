This project is a C implementation designed to generate detailed Mandelbrot fractal images and save them in PGM (Portable Gray Map) format. 
These fractals are defined through iterative calculations on complex numbers, making them ideal candidates for parallel computing to speed up calculations.

The program leverages parallel processing through OpenMP, enabling efficient generation of high-resolution Mandelbrot sets by utilizing the full computational power of multi-core processors. The generated fractal is saved as a grayscale image in PGM format, which is a versatile format commonly used in scientific computing and visualization due to its simplicity.

The main entry point of the application is main.c, which validates user input, processes command-line arguments, and coordinates the execution of the fractal generation and image export. The core computation of the Mandelbrot set is handled by mandelbrot.c and mandelbrot.h. These files include functions for dynamically allocating memory for the image matrix, calculating the iterations required for each point to determine its membership in the Mandelbrot set, and cleaning up allocated resources. The file operations related to saving the computed fractal as a PGM image are managed by pgm.c and pgm.h. These include the creation of a new PGM image, writing data to the file, and managing the file closure to ensure data integrity. Finally, the Makefile automates the build process, handling compilation with proper optimization flags and linking dependencies to streamline the process of building the executable.

The implementation uses OpenMP to distribute the workload across multiple threads, drastically improving the speed of generating the Mandelbrot set. Each thread is responsible for computing a portion of the image, resulting in faster overall performance, especially with large image resolutions and high iteration counts. Functions are provided to allocate and free memory for the Mandelbrot image matrix, ensuring efficient use of memory and preventing leaks. The program makes use of dynamic memory allocation, which allows flexibility in specifying the resolution of the output image. The project outputs the computed Mandelbrot set in PGM format, a simple grayscale image format. This format is easy to parse and is compatible with many image viewers and editors, making it ideal for visualizing fractal data. By separating the computation, memory management, and file I/O into distinct modules, the project is easier to understand, extend, and maintain. Each file focuses on a specific aspect of the programâ€™s functionality.

To compile the project, use the provided Makefile by running the command make. This will compile all source files and generate an executable named main. The Makefile includes optimizations to ensure the resulting executable is efficient for large computations. After compilation, the executable can be used to generate Mandelbrot images by running it with the required arguments. The output is saved as a PGM file, which can be viewed or edited using standard image viewers.

The code structure of the project includes main.c, which handles argument parsing, initializes the Mandelbrot image matrix, invokes computation functions, and coordinates the saving of the final image. The mandelbrot.c file contains the core logic to compute the Mandelbrot fractal, iterating over each pixel to calculate whether each corresponding complex number is part of the Mandelbrot set and assigning appropriate grayscale values. The pgm.c file implements functionality to create, write, and close a PGM file, with the Save_Pgm function ensuring the correct format and structure for easy viewing.

There are several potential future improvements for the project. One idea is to extend the current grayscale PGM format to support colored images in PPM (Portable Pixmap) format. This would add visual interest and make it easier to distinguish different regions of the Mandelbrot set, offering a more intuitive understanding of the fractal structure. Another improvement could be to introduce a dynamic zooming feature that allows users to interactively zoom into regions of the Mandelbrot set, exploring the intricate and self-repeating details of the fractal. Adding a graphical user interface (GUI) would also be beneficial, allowing users to adjust parameters like resolution, iteration count, and zoom level without using the command line, making the program more accessible to a broader audience. Further performance optimization could involve experimenting with additional techniques, such as vectorization or GPU acceleration, to improve the efficiency of fractal generation, particularly for extremely high resolutions.

The project is licensed under the MIT License, which means you are free to use, modify, and distribute it as needed, provided that proper credit is given. The author of the project is Cazzolato Kevin (SM3201245). Contributions are welcome, and if you have suggestions for new features or improvements, you are encouraged to submit a pull request or open an issue on the project repository.

